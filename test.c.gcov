        -:    0:Source:test.c
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:1
        -:    1:#include <stddef.h>
        -:    2:#include <stdint.h>
        -:    3:#include <assert.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <time.h>
        -:    8:#include "test.h"
        -:    9:
        -:   10:
        -:   11:// #define SIZE_MAX 0xffffffffffffffffui64
        -:   12:#define H2O_STRLIT(s) (s), sizeof(s) - 1
        -:   13:
        -:   14:
        -:   15:
        -:   16:
        -:   17:const h2o_url_scheme_t H2O_URL_SCHEME_HTTP = {{H2O_STRLIT("http")}, 80, 0};
        -:   18:const h2o_url_scheme_t H2O_URL_SCHEME_HTTPS = {{H2O_STRLIT("https")}, 443, 1};
        -:   19:const h2o_url_scheme_t H2O_URL_SCHEME_MASQUE = {{H2O_STRLIT("masque")}, 65535, 0 /* ??? masque might or might not be over TLS */};
        -:   20:
        1:   21:int main (int argc, char ** argv) {
        -:   22:    char * url;
        -:   23:    size_t url_len, returned_value;
        -:   24:    h2o_url_t parsed;
        1:   25:    memset(&parsed, 0x55, sizeof(parsed));
        1:   26:    url = (char *) malloc (1024 * sizeof (char));
        1:   27:    strcpy(url, argv[1]);
        1:   28:    url_len = atoi(argv[2]);
        1:   29:    printf("Input URL for C file is : %s, %ld\n", url, url_len);
        -:   30:
        1:   31:    returned_value = h2o_url_parse(url, url_len, &parsed);
        -:   32:
        1:   33:    printf ("result: %ld\n", returned_value);
        -:   34:
        1:   35:    return 0;
        -:   36:}
        -:   37:
        1:   38:size_t h2o_strtosize(const char *s, size_t len)
        -:   39:{
        1:   40:    uint64_t v = 0, m = 1;
        1:   41:    const char *p = s + len;
        -:   42:
        1:   43:    if (len == 0)
    #####:   44:        goto Error;
        -:   45:
        4:   46:    while (1) {
        5:   47:        int ch = *--p;
        5:   48:        if (!('0' <= ch && ch <= '9'))
    #####:   49:            goto Error;
        5:   50:        v += (ch - '0') * m;
        5:   51:        if (p == s)
        1:   52:            break;
        4:   53:        m *= 10;
        -:   54:        /* do not even try to overflow */
        4:   55:        if (m == 10000000000000000000ULL)
    #####:   56:            goto Error;
        -:   57:    }
        -:   58:
        1:   59:    if (v >= SIZE_MAX)
    #####:   60:        goto Error;
        1:   61:    return v;
        -:   62:
    #####:   63:Error:
    #####:   64:    return SIZE_MAX;
        -:   65:}
        -:   66:
        3:   67:static h2o_iovec_t h2o_iovec_init(const void *base, size_t len)
        -:   68:{
        -:   69:    /* intentionally declared to take a "const void*" since it may contain any type of data and since _some_ buffers are constant */
        -:   70:    h2o_iovec_t buf;
        3:   71:    buf.base = (char *)base;
        3:   72:    buf.len = len;
        3:   73:    return buf;
        -:   74:}
        -:   75:
        1:   76:const char *h2o_url_parse_hostport(const char *s, size_t len, h2o_iovec_t *host, uint16_t *port)
        -:   77:{
        1:   78:    const char *token_start = s, *token_end, *end = s + len;
        -:   79:
        1:   80:    *port = 65535;
        -:   81:
        1:   82:    if (token_start == end)
    #####:   83:        return NULL;
        -:   84:
        1:   85:    if (*token_start == '[') {
        -:   86:        /* is IPv6 address */
    #####:   87:        ++token_start;
    #####:   88:        if ((token_end = memchr(token_start, ']', end - token_start)) == NULL)
    #####:   89:            return NULL;
    #####:   90:        *host = h2o_iovec_init(token_start, token_end - token_start);
    #####:   91:        token_start = token_end + 1;
        -:   92:    } else {
        5:   93:        for (token_end = token_start; !(token_end == end || *token_end == '/' || *token_end == ':'); ++token_end)
        -:   94:            ;
        1:   95:        *host = h2o_iovec_init(token_start, token_end - token_start);
        1:   96:        token_start = token_end;
        -:   97:    }
        -:   98:
        -:   99:    /* disallow zero-length host */
        1:  100:    if (host->len == 0)
    #####:  101:        return NULL;
        -:  102:
        -:  103:    /* parse port */
        1:  104:    if (token_start != end && *token_start == ':') {
        -:  105:        size_t p;
        1:  106:        ++token_start;
        1:  107:        if ((token_end = memchr(token_start, '/', end - token_start)) == NULL)
        1:  108:            token_end = end;
        1:  109:        if ((p = h2o_strtosize(token_start, token_end - token_start)) >= 65535)
    #####:  110:            return NULL;
        1:  111:        *port = (uint16_t)p;
        1:  112:        token_start = token_end;
        -:  113:    }
        -:  114:
        1:  115:    return token_start;
        -:  116:}
        -:  117:
        -:  118:
        1:  119:static int parse_authority_and_path(const char *src, const char *url_end, h2o_url_t *parsed)
        -:  120:{
        1:  121:    const char *p = h2o_url_parse_hostport(src, url_end - src, &parsed->host, &parsed->_port);
        1:  122:    if (p == NULL)
    #####:  123:        return -1;
        1:  124:    parsed->authority = h2o_iovec_init(src, p - src);
        1:  125:    if (p == url_end) {
        1:  126:        parsed->path = h2o_iovec_init(H2O_STRLIT("/"));
        -:  127:    } else {
    #####:  128:        if (*p != '/')
    #####:  129:            return -1;
    #####:  130:        parsed->path = h2o_iovec_init(p, url_end - p);
        -:  131:    }
        1:  132:    return 0;
        -:  133:}
        -:  134:
        1:  135:static const char *parse_scheme(const char *s, const char *end, const h2o_url_scheme_t **scheme)
        -:  136:{
        1:  137:    if (end - s >= 5 && memcmp(s, "http:", 5) == 0) {
        1:  138:        *scheme = &H2O_URL_SCHEME_HTTP;
        1:  139:        return s + 5;
    #####:  140:    } else if (end - s >= 6 && memcmp(s, "https:", 6) == 0) {
    #####:  141:        *scheme = &H2O_URL_SCHEME_HTTPS;
    #####:  142:        return s + 6;
    #####:  143:    } else if (end - s >= 7 && memcmp(s, "masque:", 7) == 0) {
    #####:  144:        *scheme = &H2O_URL_SCHEME_MASQUE;
    #####:  145:        return s + 7;
        -:  146:    }
    #####:  147:    return NULL;
        -:  148:}
        -:  149:
        -:  150:
        1:  151:int h2o_url_parse(const char *url, size_t url_len, h2o_url_t *parsed)
        -:  152:{
        -:  153:    const char *url_end, *p;
        -:  154:
        1:  155:    if (url_len == SIZE_MAX)
    #####:  156:        url_len = strlen(url);
        1:  157:    url_end = url + url_len;
        -:  158:
        -:  159:    /* check and skip scheme */
        1:  160:    if ((p = parse_scheme(url, url_end, &parsed->scheme)) == NULL)
    #####:  161:        return -1;
        -:  162:
        -:  163:    /* skip "//" */
        1:  164:    if (!(url_end - p >= 2 && p[0] == '/' && p[1] == '/'))
    #####:  165:        return -1;
        1:  166:    p += 2;
        -:  167:
        1:  168:    return parse_authority_and_path(p, url_end, parsed);
        -:  169:}
        -:  170:
    #####:  171:h2o_iovec_t new_h2o_iovec () {
        -:  172:    h2o_iovec_t new_h2o_iovec;
    #####:  173:    new_h2o_iovec.base = (char *) malloc (1000 * sizeof (char));
    #####:  174:    return new_h2o_iovec;
        -:  175:}
        -:  176:
    #####:  177:const h2o_url_scheme_t * new_h2o_url_scheme () {
    #####:  178:    h2o_url_scheme_t * new_h2o_scheme = (h2o_url_scheme_t *) malloc (sizeof (h2o_url_scheme_t));
    #####:  179:    new_h2o_scheme -> name = new_h2o_iovec ();
    #####:  180:    return new_h2o_scheme;
        -:  181:}
        -:  182:
    #####:  183:h2o_url_t * new_h2o_url () {
        -:  184:    //h2o_url_t * new_h2o_url = (h2o_url_t *) malloc (sizeof (h2o_url_t));
        -:  185:    h2o_url_t * new_h2o_url;
    #####:  186:    new_h2o_url -> scheme = new_h2o_url_scheme ();
    #####:  187:    new_h2o_url -> authority = new_h2o_iovec ();
    #####:  188:    new_h2o_url -> host = new_h2o_iovec ();
    #####:  189:    new_h2o_url -> path = new_h2o_iovec ();
    #####:  190:    return new_h2o_url;
        -:  191:}
